name: Publish backend Python package to fury.io

on:
  push:
    # branches:
      # - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    env:
        GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Preapre Python code
      working-directory: backend/jupyter-middleware 
      run: pip install --extra-index-url https://pypi.fury.io/dharpa/ -e .
    - name: install 'wheel' package
      run: pip install -U wheel
    - name: create packages
      working-directory: backend/jupyter-middleware
      run: python setup.py sdist bdist_wheel
    - name: upload source package
      working-directory: backend/jupyter-middleware 
      run: curl -F package=@$(ls dist/lumy_jupyter_middleware-*.tar.gz) https://${GEMFURY_PUSH_TOKEN}@dharpa.fury.land:443/pypi/
    - name: upload wheel
      working-directory: backend/jupyter-middleware
      run: curl -F package=@$(ls dist/lumy_jupyter_middleware-*.whl) https://${GEMFURY_PUSH_TOKEN}@dharpa.fury.land:443/pypi/




    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Install dependencies using Node.js ${{ matrix.node-version }}
      # if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: yarn install
    - name: Check using Node.js ${{ matrix.node-version }}
      run: yarn compile-and-lint
      env:
        CI: true
    - name: Install python tools
      run: pip install flake8 && npm install -g pyright
    - name: Check Python code
      run: flake8 backend && pyright backend
