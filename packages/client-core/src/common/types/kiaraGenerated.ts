/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The structure (interconnections of modules/steps) of the pipeline.
 */
export type Structure = PipelineStructureDesc
/**
 * The (unique) pipeline id.
 */
export type PipelineId = string
/**
 * Attributes of the step itself.
 */
export type Step = PipelineStep
export type StepId = string
export type ParentId = string
/**
 * The module type.
 */
export type ModuleType = string
/**
 * The stage number this step is executed within the pipeline.
 */
export type ProcessingStage = number
/**
 * The id of a step within a pipeline.
 */
export type StepId1 = string
/**
 * The name of the value (output name or pipeline input name).
 */
export type ValueName = string
/**
 * A reference to a subitem of a value (e.g. column, list item)
 */
export type SubValue = string
/**
 * The processing stage of this step within a Pipeline.
 */
export type ProcessingStage1 = number
/**
 * The order in which this pipeline has to be processed (basically the dependencies of each step on other steps, if any).
 */
export type ProcessingStages = string[][]
/**
 * The current (externally facing) input values of this pipeline.
 */
export type PipelineInputs = PipelineValues
/**
 * A unique id for this value.
 */
export type Id = string
/**
 * Whether the value is set and valid.
 */
export type IsValid = boolean
/**
 * The schema of this value.
 */
export type ValueSchema = ValueSchema1
/**
 * Supported value types.
 *
 * It's very early days, so this does not really do anything yet.
 */
export type ValueType = 'any' | 'integer' | 'string' | 'dict' | 'boolean' | 'table' | 'value_items'
/**
 * A description for the value of this input field.
 */
export type Doc = string
/**
 * In case this schemas type is a container type (list, dict, ...), this field specifies the schema of its content.
 */
export type SubSchema =
  | ValueSchema1
  | {
      [k: string]: ValueSchema1
    }
/**
 * Whether this value is a constant.
 */
export type IsConstant = boolean
/**
 * Description of how/where the value was set.
 */
export type Origin = string
/**
 * The time the last update to this value happened.
 */
export type LastUpdate = string
/**
 * Whether the value is currently streamed into this object.
 */
export type IsStreaming = boolean
/**
 * The current (externally facing) output values of this pipeline.
 */
export type PipelineOutputs = PipelineValues
/**
 * Enum to describe the state of a workflow.
 */
export type StepStatus = 'stale' | 'inputs_ready' | 'processing' | 'results_ready'

/**
 * Describes the current state of a pipeline.
 *
 * This includes the structure of the pipeline (how the internal modules/steps are connected to each other), as well
 * as all current input/output values for the pipeline itself, as well as for all internal steps.
 *
 * Use the ``dict`` or ``json`` methods to convert this object into a generic data structure.
 */
export interface PipelineState {
  structure: Structure
  pipelineInputs: PipelineInputs
  pipelineOutputs: PipelineOutputs
  stepInputs: StepInputs
  stepOutputs: StepOutputs
  /**
   * The current overal status of the pipeline.
   */
  status: StepStatus
  [k: string]: unknown
}
/**
 * Outlines the internal structure of a [Pipeline][kiara.pipeline.pipeline.Pipeline].
 */
export interface PipelineStructureDesc {
  pipelineId: PipelineId
  steps: Steps
  processingStages: ProcessingStages
  pipelineInputConnections: PipelineInputConnections
  pipelineOutputConnections: PipelineOutputConnections
}
/**
 * The steps contained in this pipeline, with the 'step_id' as key.
 */
export interface Steps {
  [k: string]: StepDesc
}
/**
 * Details of a single [PipelineStep][kiara.pipeline.structure.PipelineStep] (which lives within a [Pipeline][kiara.pipeline.pipeline.Pipeline]
 */
export interface StepDesc {
  step: Step
  processingStage: ProcessingStage1
  inputConnections: InputConnections
  outputConnections: OutputConnections
}
/**
 * A step within a pipeline-structure, includes information about it's connection(s) and other metadata.
 */
export interface PipelineStep {
  stepId: StepId
  parentId: ParentId
  moduleType: ModuleType
  moduleConfig?: ModuleConfig
  processingStage?: ProcessingStage
  inputLinks?: InputLinks
}
/**
 * The module config.
 */
export interface ModuleConfig {
  [k: string]: unknown
}
/**
 * The links that connect to inputs of the module.
 */
export interface InputLinks {
  [k: string]: StepValueAddress[]
}
/**
 * Small model to describe the address of a value of a step, within a Pipeline/PipelineStructure.
 */
export interface StepValueAddress {
  stepId: StepId1
  valueName: ValueName
  subValue?: SubValue
}
/**
 * A map that explains what elements connect to this steps inputs. A connection could either be a Pipeline input (indicated by the '__pipeline__' token), or another steps output.
 */
export interface InputConnections {
  [k: string]: string[]
}
/**
 * A map that explains what elemnts connect to this steps outputs. A connection could be either a Pipeline output, or another steps input.
 */
export interface OutputConnections {
  [k: string]: string[]
}
/**
 * The connections of this pipelines input fields. One input field can be connected to one or several step input fields.
 */
export interface PipelineInputConnections {
  [k: string]: string[]
}
/**
 * The connections of this pipelines output fields. Each pipeline output is connected to exactly one step output field.
 */
export interface PipelineOutputConnections {
  [k: string]: string
}
/**
 * Convenience wrapper to make the [PipelineState][kiara.pipeline.pipeline.PipelineState] json/dict export prettier.
 *
 * This is basically just a simplified version of the [ValueSet][kiara.data.values.ValueSet] class that is using
 * pydantic, in order to make it easy to export to json.
 */
export interface PipelineValues {
  values: Values
  [k: string]: unknown
}
/**
 * Field names are keys, and the data as values.
 */
export interface Values {
  [k: string]: PipelineValue
}
/**
 * Convenience wrapper to make the [PipelineState][kiara.pipeline.pipeline.PipelineState] json/dict export prettier.
 */
export interface PipelineValue {
  id: Id
  isValid?: IsValid
  valueSchema: ValueSchema
  isConstant?: IsConstant
  origin?: Origin
  lastUpdate?: LastUpdate
  isStreaming?: IsStreaming
  metadata?: Metadata
}
/**
 * The schema of a value.
 *
 * The schema contains the [ValueType][kiara.data.values.ValueType] of a value, as well as an optional default that
 * will be used if no user input was given (yet) for a value.
 *
 * For more complex types like arrays and tables, a sub-schema will be available (e.g. columns of a table, type of
 * the array-items, ...). This bit is not implemented yet.
 */
export interface ValueSchema1 {
  type: ValueType
  doc?: Doc
  default?: Default
  subSchema?: SubSchema
  [k: string]: unknown
}
/**
 * A default value.
 */
export interface Default {
  [k: string]: unknown
}
/**
 * Metadata relating to the actual data (size, no. of rows, etc. -- depending on data type).
 */
export interface Metadata {
  [k: string]: unknown
}
/**
 * The current (internal) input values of each step of this pipeline.
 */
export interface StepInputs {
  [k: string]: PipelineValues
}
/**
 * The current (internal) output values of each step of this pipeline.
 */
export interface StepOutputs {
  [k: string]: PipelineValues
}
