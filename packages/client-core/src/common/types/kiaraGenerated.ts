/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The structure (interconnections of modules/steps) of the pipeline.
 */
export type Structure = PipelineStructureDesc
/**
 * The (unique) pipeline id.
 */
export type PipelineId = string
/**
 * Attributes of the step itself.
 */
export type Step = PipelineStep
export type StepId = string
export type ParentId = string
/**
 * The module type.
 */
export type ModuleType = string
/**
 * Whether this step is required within the workflow.
 *
 * In some cases, when none of the pipeline outputs have a required input that connects to a step, then it is not necessary for this step to have been executed, even if it is placed before a step in the execution hierarchy. This also means that the pipeline inputs that are connected to this step might not be required.
 */
export type Required = boolean
/**
 * The stage number this step is executed within the pipeline.
 */
export type ProcessingStage = number
/**
 * The id of a step within a pipeline.
 */
export type StepId1 = string
/**
 * The name of the value (output name or pipeline input name).
 */
export type ValueName = string
/**
 * The processing stage of this step within a Pipeline.
 */
export type ProcessingStage1 = number
/**
 * Whether this step is always required, or potentially could be skipped in case some inputs are not available.
 */
export type Required1 = boolean
/**
 * The order in which this pipeline has to be processed (basically the dependencies of each step on other steps, if any).
 */
export type ProcessingStages = string[][]
export type ValueName1 = string
/**
 * The type of the value.
 */
export type Type = string
/**
 * A default value.
 */
export type Default = string
/**
 * Whether this value is required (True), or whether 'None' value is allowed (False).
 */
export type Optional = boolean
/**
 * A description for the value of this input field.
 */
export type Doc = string
export type PipelineId1 = string
/**
 * The step inputs that are connected to this pipeline input
 */
export type ConnectedInputs = StepValueAddress[]
export type IsConstant = IsConstant1 & IsConstant2
export type IsConstant1 = boolean
export type IsConstant2 = string
export type ValueName2 = string
export type PipelineId2 = string
/**
 * Connected step outputs.
 */
export type ConnectedOutput = StepValueAddress
/**
 * The current (externally facing) input values of this pipeline.
 */
export type PipelineInputs1 = PipelineValues
/**
 * A unique id for this value.
 */
export type Id = string
/**
 * Whether the value is set and valid.
 */
export type IsValid = boolean
/**
 * Whether the value is set.
 */
export type IsSet = boolean
/**
 * The schema of this value.
 */
export type ValueSchema1 = ValueSchema
/**
 * Whether this value is a constant.
 */
export type IsConstant3 = boolean
/**
 * Description of how/where the value was set.
 */
export type Origin = string
/**
 * The time the last update to this value happened.
 */
export type LastUpdate = string
/**
 * The hash of the current value.
 */
export type ValueHash = ValueHashMarker | number
/**
 * An enumeration.
 */
export type ValueHashMarker = '-- no_value --' | '-- deferred --' | '-- no_hash --'
/**
 * Whether the value is currently streamed into this object.
 */
export type IsStreaming = boolean
/**
 * The current (externally facing) output values of this pipeline.
 */
export type PipelineOutputs1 = PipelineValues
/**
 * Enum to describe the state of a workflow.
 */
export type StepStatus = 'stale' | 'inputs_ready' | 'processing' | 'results_ready'

/**
 * Describes the current state of a pipeline.
 *
 * This includes the structure of the pipeline (how the internal modules/steps are connected to each other), as well
 * as all current input/output values for the pipeline itself, as well as for all internal steps.
 *
 * Use the ``dict`` or ``json`` methods to convert this object into a generic data structure.
 */
export interface PipelineState {
  structure: Structure
  pipelineInputs: PipelineInputs1
  pipelineOutputs: PipelineOutputs1
  /**
   * The status of each step.
   */
  stepStates: {
    [k: string]: StepStatus
  }
  stepInputs: StepInputs
  stepOutputs: StepOutputs
  /**
   * The current overal status of the pipeline.
   */
  status: StepStatus
  [k: string]: unknown
}
/**
 * Outlines the internal structure of a [Pipeline][kiara.pipeline.pipeline.Pipeline].
 */
export interface PipelineStructureDesc {
  pipelineId: PipelineId
  steps: Steps
  processingStages: ProcessingStages
  pipelineInputConnections: PipelineInputConnections
  pipelineOutputConnections: PipelineOutputConnections
  pipelineInputs: PipelineInputs
  pipelineOutputs: PipelineOutputs
}
/**
 * The steps contained in this pipeline, with the 'step_id' as key.
 */
export interface Steps {
  [k: string]: StepDesc
}
/**
 * Details of a single [PipelineStep][kiara.pipeline.structure.PipelineStep] (which lives within a [Pipeline][kiara.pipeline.pipeline.Pipeline]
 */
export interface StepDesc {
  step: Step
  processingStage: ProcessingStage1
  inputConnections: InputConnections
  outputConnections: OutputConnections
  required: Required1
}
/**
 * A step within a pipeline-structure, includes information about it's connection(s) and other metadata.
 */
export interface PipelineStep {
  stepId: StepId
  parentId: ParentId
  moduleType: ModuleType
  moduleConfig?: ModuleConfig
  required?: Required
  processingStage?: ProcessingStage
  inputLinks?: InputLinks
}
/**
 * The module config.
 */
export interface ModuleConfig {
  [k: string]: unknown
}
/**
 * The links that connect to inputs of the module.
 */
export interface InputLinks {
  [k: string]: StepValueAddress[]
}
/**
 * Small model to describe the address of a value of a step, within a Pipeline/PipelineStructure.
 */
export interface StepValueAddress {
  stepId: StepId1
  valueName: ValueName
  subValue?: SubValue
}
/**
 * A reference to a subitem of a value (e.g. column, list item)
 */
export interface SubValue {
  [k: string]: unknown
}
/**
 * A map that explains what elements connect to this steps inputs. A connection could either be a Pipeline input (indicated by the ``__pipeline__`` token), or another steps output.
 *
 * Example:
 * ``` json
 * input_connections: {
 *     "a": ["__pipeline__.a"],
 *     "b": ["step_one.a"]
 * }
 *
 * ```
 *
 */
export interface InputConnections {
  [k: string]: string[]
}
/**
 * A map that explains what elemnts connect to this steps outputs. A connection could be either a Pipeline output, or another steps input.
 */
export interface OutputConnections {
  [k: string]: string[]
}
/**
 * The connections of this pipelines input fields. One input field can be connected to one or several step input fields.
 */
export interface PipelineInputConnections {
  [k: string]: string[]
}
/**
 * The connections of this pipelines output fields. Each pipeline output is connected to exactly one step output field.
 */
export interface PipelineOutputConnections {
  [k: string]: string
}
/**
 * The pipeline inputs.
 */
export interface PipelineInputs {
  [k: string]: PipelineInputField
}
/**
 * An input to a pipeline.
 */
export interface PipelineInputField {
  valueName: ValueName1
  valueSchema: ValueSchema
  pipelineId: PipelineId1
  connectedInputs?: ConnectedInputs
  isConstant?: IsConstant
}
/**
 * The schema of a value.
 *
 * The schema contains the [ValueType][kiara.data.values.ValueType] of a value, as well as an optional default that
 * will be used if no user input was given (yet) for a value.
 *
 * For more complex container types like arrays, tables, unions etc, types can also be configured with values from the ``type_config`` field.
 */
export interface ValueSchema {
  type: Type
  typeConfig?: TypeConfig
  default?: Default
  optional?: Optional
  doc?: Doc
  [k: string]: unknown
}
/**
 * Configuration for the type, in case it's complex.
 */
export interface TypeConfig {
  [k: string]: unknown
}
/**
 * The pipeline outputs.
 */
export interface PipelineOutputs {
  [k: string]: PipelineOutputField
}
/**
 * An output to a pipeline.
 */
export interface PipelineOutputField {
  valueName: ValueName2
  valueSchema: ValueSchema
  pipelineId: PipelineId2
  connectedOutput: ConnectedOutput
}
/**
 * Convenience wrapper to make the [PipelineState][kiara.pipeline.pipeline.PipelineState] json/dict export prettier.
 *
 * This is basically just a simplified version of the [ValueSet][kiara.data.values.ValueSet] class that is using
 * pydantic, in order to make it easy to export to json.
 */
export interface PipelineValues {
  values: Values
  [k: string]: unknown
}
/**
 * Field names are keys, and the data as values.
 */
export interface Values {
  [k: string]: PipelineValue
}
/**
 * Convenience wrapper to make the [PipelineState][kiara.pipeline.pipeline.PipelineState] json/dict export prettier.
 */
export interface PipelineValue {
  id: Id
  isValid?: IsValid
  isSet: IsSet
  valueSchema: ValueSchema1
  isConstant?: IsConstant3
  origin?: Origin
  lastUpdate?: LastUpdate
  valueHash: ValueHash
  isStreaming?: IsStreaming
  metadata?: Metadata
}
/**
 * Metadata relating to the actual data (size, no. of rows, etc. -- depending on data type).
 */
export interface Metadata {
  [k: string]: unknown
}
/**
 * The current (internal) input values of each step of this pipeline.
 */
export interface StepInputs {
  [k: string]: PipelineValues
}
/**
 * The current (internal) output values of each step of this pipeline.
 */
export interface StepOutputs {
  [k: string]: PipelineValues
}
